{
  "fileName": "SecretStorage.java",
  "filePath": "common/src/main/java/org/ergoplatform/appkit/SecretStorage.java",
  "url": "https://github.com/ergoplatform/ergo-appkit/common/src/main/java/org/ergoplatform/appkit/SecretStorage.java",
  "summary": "The `SecretStorage` class in the `ergo-appkit` project provides a way to store a mnemonic phrase in an encrypted file that can be accessed using a password. The class provides methods to lock and unlock the storage, get the underlying storage file, get the extended secret key, and get the address for a given network type. \n\nThe `SecretStorage` class has a constructor that takes a `JsonSecretStorage` object as a parameter. The `JsonSecretStorage` class is responsible for storing and retrieving the encrypted mnemonic phrase. The `SecretStorage` class provides a layer of abstraction over the `JsonSecretStorage` class, making it easier to use in the larger project.\n\nThe `SecretStorage` class provides two methods to unlock the storage: `unlock(SecretString encryptionPass)` and `unlock(String encryptionPass)`. Both methods take an encryption password as a parameter. The `SecretString` class is used to represent a string that should be kept secret. The `unlock(SecretString encryptionPass)` method calls the `unlock` method of the `JsonSecretStorage` object with the `SecretString` object converted to an `Interface4JSecretString` object. The `unlock(String encryptionPass)` method calls the `unlock(SecretString encryptionPass)` method with a `SecretString` object created from the string parameter.\n\nThe `SecretStorage` class provides two static methods to create a new `SecretStorage` object: `createFromMnemonicIn` and `loadFrom`. The `createFromMnemonicIn` method initializes the storage with the seed derived from an existing mnemonic phrase. The method takes the secret directory, the mnemonic phrase, the encryption password, and a boolean flag indicating whether to use the incorrect(previous) BIP32 derivation. The `loadFrom` method loads an existing `SecretStorage` object from a file.\n\nHere is an example of how to use the `SecretStorage` class to unlock the storage and get the address for the testnet:\n\n```\nSecretStorage secretStorage = SecretStorage.loadFrom(\"secret-storage.json\");\nsecretStorage.unlock(\"my-password\");\nAddress address = secretStorage.getAddressFor(NetworkType.TESTNET);\n```\n\nIn this example, the `loadFrom` method is used to load the `SecretStorage` object from the `secret-storage.json` file. The `unlock` method is called with the password \"my-password\" to unlock the storage. The `getAddressFor` method is called with the `NetworkType.TESTNET` parameter to get the address for the testnet.",
  "questions": "1. What is the purpose of this code?\n- This code provides encrypted storage of a mnemonic phrase in a file that can be accessed using a password.\n\n2. What dependencies does this code have?\n- This code has dependencies on the Ergo Platform library, Scala runtime, and sigmastate.basics.\n\n3. What methods are available for unlocking the secret storage?\n- There are two methods available for unlocking the secret storage: one that takes a `SecretString` object and another that takes a `String` object."
}