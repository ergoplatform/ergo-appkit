{
  "folderName": "impl",
  "folderPath": ".autodoc/docs/json/common/src/main/java/org/ergoplatform/appkit/impl",
  "url": "https://github.com/ergoplatform/ergo-appkit/.autodoc/docs/json/common/src/main/java/org/ergoplatform/appkit/impl",
  "files": [
    {
      "fileName": "ErgoScriptContract.java",
      "filePath": "common/src/main/java/org/ergoplatform/appkit/impl/ErgoScriptContract.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/common/src/main/java/org/ergoplatform/appkit/impl/ErgoScriptContract.java",
      "summary": "The `ErgoScriptContract` class is a part of the `ergo-appkit` project and implements the `ErgoContract` interface. It represents a smart contract on the Ergo blockchain and provides methods to interact with it. \n\nThe class has three private fields: `_constants`, `_code`, and `_networkType`. `_constants` is an instance of the `Constants` class, which contains a map of constant values used in the contract. `_code` is a string that represents the ErgoScript code of the contract. `_networkType` is an instance of the `NetworkType` enum, which specifies the network type (Mainnet or Testnet) of the contract.\n\nThe class provides a public constructor that takes three parameters: `constants`, `code`, and `networkType`. It creates a new instance of the `ErgoScriptContract` class with the given parameters.\n\nThe class also provides several methods that implement the methods of the `ErgoContract` interface. The `getConstants()` method returns the `_constants` field. The `getErgoScript()` method returns the `_code` field.\n\nThe `substConstant(String name, Object value)` method creates a new instance of the `Constants` class with the same values as `_constants`, but with the value of the constant with the given `name` replaced with the given `value`. It then creates a new instance of the `ErgoScriptContract` class with the new `Constants` instance, the same `_code` value, and the same `_networkType` value.\n\nThe `getErgoTree()` method compiles the `_code` value into an `ErgoTree` instance using the `JavaHelpers.compile()` method. It takes the `_constants` instance, the `_code` value, and the network prefix of the `_networkType` instance as parameters. It then returns the resulting `ErgoTree` instance.\n\nThe `toAddress()` method returns an `Address` instance that represents the address of the contract on the Ergo blockchain. It does this by calling the `Address.fromErgoTree()` method with the `ErgoTree` instance returned by the `getErgoTree()` method and the `_networkType` instance as parameters.\n\nOverall, the `ErgoScriptContract` class provides a convenient way to create and interact with smart contracts on the Ergo blockchain. It allows developers to specify the constant values and ErgoScript code of the contract, and provides methods to compile the code, get the contract address, and replace constant values.",
      "questions": "1. What is the purpose of this code and what problem does it solve?\n- This code defines a class called `ErgoScriptContract` which implements the `ErgoContract` interface. It provides methods for creating and manipulating ErgoScript contracts, which are used in the Ergo blockchain to define transaction outputs and conditions for spending them.\n\n2. What are the input parameters for creating a new instance of `ErgoScriptContract`?\n- A new instance of `ErgoScriptContract` can be created by calling the static `create` method and passing in three parameters: a `Constants` object, a `String` containing the ErgoScript code, and a `NetworkType` object representing the network type (Mainnet, Testnet, or Regtest).\n\n3. What is the purpose of the `substConstant` method and how does it work?\n- The `substConstant` method takes in a `String` name and an `Object` value, and returns a new instance of `ErgoScriptContract` with the specified constant replaced by the new value. It works by cloning the original `Constants` object, replacing the specified constant, and creating a new `ErgoScriptContract` instance with the updated `Constants` object and the same ErgoScript code and network type."
    },
    {
      "fileName": "ErgoTreeContract.java",
      "filePath": "common/src/main/java/org/ergoplatform/appkit/impl/ErgoTreeContract.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/common/src/main/java/org/ergoplatform/appkit/impl/ErgoTreeContract.java",
      "summary": "The `ErgoTreeContract` class is a part of the `ergo-appkit` project and implements the `ErgoContract` interface. It represents a smart contract on the Ergo blockchain and provides methods to interact with it. \n\nThe class has two instance variables: `_ergoTree` of type `Values.ErgoTree` and `_networkType` of type `NetworkType`. The `_ergoTree` variable represents the ErgoTree of the smart contract, which is a serialized form of the contract script. The `_networkType` variable represents the network type on which the contract is deployed, either `MAINNET` or `TESTNET`.\n\nThe class provides four methods that are required by the `ErgoContract` interface. The `getConstants()` method returns the constants used in the contract, but it is not implemented in this class and throws a `RuntimeException`. The `getErgoScript()` method returns the serialized script of the contract, but it is also not implemented and throws a `RuntimeException`. The `substConstant(String name, Object value)` method substitutes a constant value in the contract script, but it is not implemented and throws a `RuntimeException`. The `getErgoTree()` method returns the `_ergoTree` instance variable, which represents the serialized script of the contract.\n\nThe `toAddress()` method returns the `Address` object of the contract. It uses the `_ergoTree` and `_networkType` instance variables to create an `Address` object using the `fromErgoTree()` method of the `Address` class.\n\nThis class can be used to represent a smart contract on the Ergo blockchain and to interact with it. It provides a way to get the serialized script of the contract and its constants, and to get the `Address` object of the contract. The `Address` object can be used to send Ergs or tokens to the contract, or to call its methods. \n\nExample usage:\n\n```\nValues.ErgoTree ergoTree = ... // get the serialized script of the contract\nNetworkType networkType = NetworkType.MAINNET; // set the network type\nErgoTreeContract contract = new ErgoTreeContract(ergoTree, networkType); // create a contract object\nAddress address = contract.toAddress(); // get the address of the contract\n```",
      "questions": "1. What is the purpose of the `ErgoTreeContract` class?\n    \n    The `ErgoTreeContract` class is an implementation of the `ErgoContract` interface and represents a contract defined by an ErgoTree.\n\n2. What is the significance of the `NetworkType` parameter in the constructor?\n    \n    The `NetworkType` parameter specifies the network type (Mainnet or Testnet) for which the contract is intended.\n\n3. What is the purpose of the `substConstant` method?\n    \n    The `substConstant` method is intended to substitute a named constant in the contract with a new value. However, this method is not implemented and currently throws a `RuntimeException`."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/common/src/main/java/org/ergoplatform/appkit/impl` folder contains two Java classes, `ErgoScriptContract` and `ErgoTreeContract`, which are part of the `ergo-appkit` project. Both classes implement the `ErgoContract` interface and represent smart contracts on the Ergo blockchain, providing methods to interact with them.\n\n`ErgoScriptContract` allows developers to create and interact with smart contracts by specifying constant values and ErgoScript code. It provides methods to compile the code, get the contract address, and replace constant values. For example:\n\n```java\nConstants constants = ... // define constants\nString code = ... // define ErgoScript code\nNetworkType networkType = NetworkType.MAINNET; // set the network type\nErgoScriptContract contract = new ErgoScriptContract(constants, code, networkType); // create a contract object\nAddress address = contract.toAddress(); // get the address of the contract\n```\n\n`ErgoTreeContract` represents a smart contract on the Ergo blockchain using the serialized script (ErgoTree) of the contract. It provides a way to get the contract's `Address` object, which can be used to send Ergs or tokens to the contract or call its methods. However, it does not implement methods for getting constants or the ErgoScript code. Example usage:\n\n```java\nValues.ErgoTree ergoTree = ... // get the serialized script of the contract\nNetworkType networkType = NetworkType.MAINNET; // set the network type\nErgoTreeContract contract = new ErgoTreeContract(ergoTree, networkType); // create a contract object\nAddress address = contract.toAddress(); // get the address of the contract\n```\n\nBoth classes provide a convenient way to interact with smart contracts on the Ergo blockchain. Developers can choose the appropriate class based on their requirements, whether they need to work with ErgoScript code and constants (`ErgoScriptContract`) or directly with the serialized script (`ErgoTreeContract`). These classes can be used in conjunction with other parts of the `ergo-appkit` project to build and deploy smart contracts, send transactions, and interact with the Ergo blockchain.",
  "questions": ""
}