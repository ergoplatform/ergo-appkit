{
  "fileName": "ExplorerAndPoolUnspentBoxesLoader.java",
  "filePath": "lib-api/src/main/java/org/ergoplatform/appkit/ExplorerAndPoolUnspentBoxesLoader.java",
  "url": "https://github.com/ergoplatform/ergo-appkit/lib-api/src/main/java/org/ergoplatform/appkit/ExplorerAndPoolUnspentBoxesLoader.java",
  "summary": "The `ExplorerAndPoolUnspentBoxesLoader` class is an implementation of the `BoxOperations.IUnspentBoxesLoader` interface, which is used to load unspent boxes (i.e., boxes that have not been used as inputs in any transaction) for use in transactions made by the `BoxOperations` class. This implementation is designed to be used with the `BoxOperations#withInputBoxesLoader(BoxOperations.IUnspentBoxesLoader)` method.\n\nThe purpose of this implementation is to fetch the mempool from the node connected to and blacklist the inputs so they aren't used for transactions made by `BoxOperations` methods. Additionally, it allows the use of boxes available on mempool to be spent, allowing for chained transactions.\n\nThe `ExplorerAndPoolUnspentBoxesLoader` class has a `withAllowChainedTx(boolean allowChainedTx)` method that can be used to enable or disable the use of chained transactions. By default, this is set to `false`.\n\nThe class overrides several methods from the `BoxOperations.ExplorerApiWithCheckerLoader` class, which is the default implementation of the `BoxOperations.IUnspentBoxesLoader` interface. The `prepare(BlockchainContext ctx, List<Address> addresses, long grossAmount, List<ErgoToken> tokensToSpend)` method fetches the mempool from the node connected to and blacklists the inputs so they aren't used for transactions made by `BoxOperations` methods. The `prepareForAddress(Address address)` method resets the state of the loader for a new address. The `canUseBox(InputBox box)` method checks if a box can be used based on whether it has been blacklisted. The `loadBoxesPage(BlockchainContext ctx, Address sender, Integer page)` method loads a page of input boxes and, if there are no boxes available and chained transactions are allowed, fetches unconfirmed transactions for the address and adds its boxes as the last page.\n\nOverall, the `ExplorerAndPoolUnspentBoxesLoader` class provides a way to load unspent boxes for use in transactions made by `BoxOperations` methods while also allowing the use of boxes available on mempool to be spent and blacklisting inputs so they aren't used for transactions.",
  "questions": "1. What is the purpose of this class and how does it differ from the default implementation?\n   \n   This class is an implementation of the `BoxOperations.IUnspentBoxesLoader` interface that fetches the mempool from the node connected to and blacklists the inputs so they aren't used for transactions made by `BoxOperations` methods. It also allows for the use of boxes available on mempool to be spent, allowing for chained transactions. This differs from the default implementation by providing additional functionality for handling unspent boxes.\n\n2. What is the purpose of the `prepare` method and what does it do?\n   \n   The `prepare` method is used to prepare the loader for loading input boxes. It clears the list of unconfirmed spent box IDs and fetches unconfirmed transactions from the blockchain data source. It then adds the IDs of the input boxes from these transactions to the list of unconfirmed spent box IDs.\n\n3. What is the purpose of the `loadBoxesPage` method and how does it handle chained transactions?\n   \n   The `loadBoxesPage` method loads a page of input boxes for a given sender address. If the list of input boxes is empty and chained transactions are allowed, it fetches unconfirmed unspent boxes for the sender address and adds them as the last page of input boxes. This is done to allow for chained transactions where the output of one transaction is used as the input for another transaction."
}