{
  "fileName": "InputBoxesValidatorJavaHelper.scala",
  "filePath": "lib-api/src/main/java/org/ergoplatform/appkit/InputBoxesValidatorJavaHelper.scala",
  "url": "https://github.com/ergoplatform/ergo-appkit/lib-api/src/main/java/org/ergoplatform/appkit/InputBoxesValidatorJavaHelper.scala",
  "summary": "The `InputBoxesValidatorJavaHelper` object provides a method for validating a list of unspent input boxes to ensure they contain enough funds and tokens to cover a specified amount and set of tokens. This is useful for constructing transactions in the Ergo blockchain.\n\nThe `validateBoxes` method takes three arguments: a list of `InputBox` objects representing unspent boxes, a `Long` amount to spend, and a list of `ErgoToken` objects representing the tokens to spend. The method first converts the `unspentBoxes` and `tokensToSpend` arguments to Scala collections using the `convertTo` method from the `Iso` object. It then creates a `targetAssets` map from the `tokensToSpend` argument. \n\nThe method then calls the `select` method of an `InputBoxesValidator` object with the converted `inputBoxes`, `amountToSpend`, and `targetAssets` arguments. The `select` method returns either a `Left` value representing an error or a `Right` value representing a successful selection of input boxes. \n\nIf the `select` method returns a `Left` value, the method throws an exception based on the type of error. If the error is a `NotEnoughCoinsForChangeBoxesError`, the method throws a `NotEnoughCoinsForChangeException`. If the error is a `NotEnoughErgsError`, the method checks if the balance found in the input boxes is greater than or equal to the amount to spend. If it is, the method throws a `NotEnoughCoinsForChangeException`. Otherwise, the method throws a `NotEnoughErgsException`. If the error is a `NotEnoughTokensError`, the method creates a `HashMap` of token IDs and values and throws a `NotEnoughTokensException`. If the error is any other type of error, the method throws an `InputBoxesSelectionException`.\n\nIf the `select` method returns a `Right` value, the method does nothing and returns `Unit`.\n\nOverall, this code provides a useful utility for validating input boxes for constructing transactions in the Ergo blockchain. Here is an example usage of the `validateBoxes` method:\n\n```scala\nimport org.ergoplatform.appkit._\n\nval unspentBoxes: java.util.List[InputBox] = ???\nval amountToSpend: Long = ???\nval tokensToSpend: java.util.List[ErgoToken] = ???\n\nInputBoxesValidatorJavaHelper.validateBoxes(unspentBoxes, amountToSpend, tokensToSpend)\n```",
  "questions": "1. What is the purpose of the `InputBoxesValidatorJavaHelper` object?\n- The `InputBoxesValidatorJavaHelper` object provides a method `validateBoxes` that validates a list of unspent input boxes against a target amount and tokens to spend.\n\n2. What external libraries or dependencies does this code use?\n- This code uses several external libraries including `org.ergoplatform`, `scorex.util`, and `java.util`.\n\n3. What exceptions can be thrown by the `validateBoxes` method?\n- The `validateBoxes` method can throw several exceptions including `NotEnoughErgsException`, `NotEnoughTokensException`, and `InputBoxesSelectionException`."
}