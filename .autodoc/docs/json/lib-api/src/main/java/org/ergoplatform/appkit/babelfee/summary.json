{
  "folderName": "babelfee",
  "folderPath": ".autodoc/docs/json/lib-api/src/main/java/org/ergoplatform/appkit/babelfee",
  "url": "https://github.com/ergoplatform/ergo-appkit/.autodoc/docs/json/lib-api/src/main/java/org/ergoplatform/appkit/babelfee",
  "files": [
    {
      "fileName": "BabelFeeBoxContract.java",
      "filePath": "lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeBoxContract.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeBoxContract.java",
      "summary": "The `BabelFeeBoxContract` class is a representation of a smart contract used in the Ergo blockchain. The purpose of this contract is to create a box (a data structure that holds assets in the Ergo blockchain) that can be used to pay for transaction fees in the Ergo network. \n\nThe contract is defined by an ErgoTreeTemplate, which is a binary representation of the contract's logic. The `contractTemplateHex` variable contains the hexadecimal representation of the ErgoTreeTemplate. The `contractTemplate` variable is a byte array that is obtained by decoding the `contractTemplateHex` variable. \n\nThe `BabelFeeBoxContract` class has two constructors. The first constructor takes an `ErgoId` object as a parameter. The `ErgoId` object represents the token that will be used to pay for transaction fees. The constructor creates an `ErgoTree` object by applying the `tokenId` parameter to the `contractTemplate`. The resulting `ErgoTree` object is stored in the `ergoTree` field. \n\nThe second constructor takes an `ErgoTree` object as a parameter. The `ErgoTree` object represents the contract's logic. The constructor creates an `ErgoId` object by extracting the token ID from the `ErgoTree` object. The `ErgoId` object is stored in the `tokenId` field. \n\nThe `getErgoTree` method returns the `ergoTree` field, which contains the contract's logic in the form of an `ErgoTree` object. The `getTokenId` method returns the `tokenId` field, which contains the token ID used to pay for transaction fees. \n\nThis class can be used in the larger project to create boxes that can be used to pay for transaction fees. For example, the following code creates a `BabelFeeBoxContract` object and uses it to create a box that can be used to pay for transaction fees:\n\n```\nErgoId tokenId = new ErgoId(\"1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\");\nBabelFeeBoxContract contract = new BabelFeeBoxContract(tokenId);\nValues.ErgoTree ergoTree = contract.getErgoTree();\nlong value = 1000000000L;\nErgoBox box = new ErgoBox(value, ergoTree);\n```\n\nIn this example, a new `ErgoId` object is created with a random token ID. A new `BabelFeeBoxContract` object is created with the `ErgoId` object as a parameter. The `getErgoTree` method is called to obtain the `ErgoTree` object. A new `ErgoBox` object is created with the `ErgoTree` object and a value of 1 Ergo. This box can be used to pay for transaction fees in the Ergo network.",
      "questions": "1. What is the purpose of this code and what problem does it solve?\n- This code defines a class called `BabelFeeBoxContract` which represents a smart contract used for Ergo blockchain transactions. It solves the problem of creating and managing a smart contract for handling fees in the Ergo blockchain.\n\n2. What is the significance of the `templateHash` variable?\n- The `templateHash` variable is a string representation of the hash of the ErgoTreeTemplate used by the `BabelFeeBoxContract`. It is used for Explorer requests to identify the contract.\n\n3. What is the difference between the two constructors of the `BabelFeeBoxContract` class?\n- The first constructor takes an `ErgoId` as a parameter and creates an `ErgoTree` using the `contractTemplate` and the `tokenId`. The second constructor takes an `ErgoTree` as a parameter and creates an `ErgoId` from the `tokenId` parameter of the `ErgoTree`."
    },
    {
      "fileName": "BabelFeeBoxState.java",
      "filePath": "lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeBoxState.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeBoxState.java",
      "summary": "The `BabelFeeBoxState` class represents a state of a Babel Fee Box, which is a contract that allows paying transaction fees in tokens instead of the platform's primary token (ERG). This class provides methods to interact with the Babel Fee Box, such as calculating the amount of tokens to sell to receive a certain amount of nanoErgs, building a new Babel Fee Box state after a token swap, and building an `OutBox` representing the Babel Fee Box.\n\nThe constructor of the `BabelFeeBoxState` class takes a `TransactionBox` object as input and extracts the necessary information from it to initialize the state of the Babel Fee Box. The `TransactionBox` object represents an unspent output box of a transaction on the Ergo blockchain. The `BabelFeeBoxState` class extracts the value, registers, and tokens of the `TransactionBox` object to initialize the `value`, `boxCreator`, `pricePerToken`, `tokenId`, and `tokenAmount` fields of the `BabelFeeBoxState` object. The `value` field represents the overall nanoErg value in the box, the `boxCreator` field represents the owner of the Babel Fee Box, the `pricePerToken` field represents the nanoErg amount offered per raw token amount, the `tokenId` field represents the token id this Babel Fee Box is offering change for, and the `tokenAmount` field represents the raw amount of tokens already collected in the box.\n\nThe `BabelFeeBoxState` class provides getter methods for the `pricePerToken`, `tokenId`, `boxCreator`, `value`, and `tokenAmount` fields. It also provides methods to calculate the overall ERG value available to change for tokens, the max token raw amount possible to swap at the best price, and the amount of tokens to sell to receive a certain amount of nanoErgs. Additionally, it provides a method to build a new Babel Fee Box state after a token swap and a method to build an `OutBox` representing the Babel Fee Box.\n\nThe `buildSucceedingState` method takes a `tokenAmountChange` parameter, which represents the token amount to add to the new Babel Fee Box. It checks if the `tokenAmountChange` is greater than 0 and less than or equal to the max token amount to buy. If the `tokenAmountChange` is valid, it returns a new `BabelFeeBoxState` object with the updated `value` and `tokenAmount` fields.\n\nThe `buildOutbox` method takes a `txBuilder` parameter, which represents the `UnsignedTransactionBuilder` object used to build the new outbox, and an optional `precedingBabelBox` parameter, which represents the preceding Babel Fee Box if this is not the initial Babel Fee Box. It builds an `OutBoxBuilder` object with the necessary parameters, such as the contract, value, and registers, and returns an `OutBox` object representing the Babel Fee Box.\n\nOverall, the `BabelFeeBoxState` class provides a convenient way to interact with a Babel Fee Box on the Ergo blockchain. It allows developers to calculate the amount of tokens to sell to receive a certain amount of nanoErgs, build a new Babel Fee Box state after a token swap, and build an `OutBox` representing the Babel Fee Box.",
      "questions": "1. What is the purpose of the BabelFeeBoxState class?\n- The BabelFeeBoxState class represents a Babel Fee Box state, which is a contract that buys tokens and pays ERG, suitable to be used in any transaction.\n\n2. What are the main attributes of a BabelFeeBoxState object?\n- The main attributes of a BabelFeeBoxState object are pricePerToken, tokenId, boxCreator, value, and tokenAmount.\n\n3. What methods are available to interact with a BabelFeeBoxState object?\n- Some of the methods available to interact with a BabelFeeBoxState object include getPricePerToken(), getTokenId(), getBoxCreator(), getValue(), getTokenAmount(), calcTokensToSellForErgAmount(), buildSucceedingState(), and buildOutbox()."
    },
    {
      "fileName": "BabelFeeBoxStateBuilder.java",
      "filePath": "lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeBoxStateBuilder.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeBoxStateBuilder.java",
      "summary": "The `BabelFeeBoxStateBuilder` class is a builder that allows for the creation of a `BabelFeeBoxState` object with self-defined information. The `BabelFeeBoxState` object represents a box that contains a certain amount of tokens and nanoErgs, and is used to pay for transaction fees on the Ergo blockchain. \n\nThe `BabelFeeBoxStateBuilder` class has several methods that allow for the setting of different properties of the `BabelFeeBoxState` object. These methods include `withPricePerToken`, `withTokenId`, `withBoxCreator`, `withValue`, and `withTokenAmount`. Each of these methods sets a specific property of the `BabelFeeBoxState` object. \n\nThe `withPricePerToken` method sets the price per token of the `BabelFeeBoxState` object. The `withTokenId` method sets the ID of the token that the `BabelFeeBoxState` object contains. The `withBoxCreator` method sets the creator of the `BabelFeeBoxState` object. This can be either a `SigmaProp` object or an `Address` object. The `withValue` method sets the amount of nanoErgs that the `BabelFeeBoxState` object contains. The `withTokenAmount` method sets the amount of tokens that the `BabelFeeBoxState` object contains. \n\nThe `build` method creates a new `BabelFeeBoxState` object with the properties that have been set using the builder methods. Before creating the object, the method checks that the `boxCreator` and `tokenId` properties have been set, and that the `value` and `pricePerToken` properties are greater than 0. If any of these conditions are not met, an exception is thrown. \n\nOverall, the `BabelFeeBoxStateBuilder` class provides a convenient way to create `BabelFeeBoxState` objects with custom properties. This can be useful in the larger project when creating transactions that require payment of transaction fees using `BabelFeeBoxState` objects. \n\nExample usage:\n\n```\nBabelFeeBoxStateBuilder builder = new BabelFeeBoxStateBuilder();\nBabelFeeBoxState boxState = builder\n    .withPricePerToken(1000000)\n    .withTokenId(tokenId)\n    .withBoxCreator(boxCreator)\n    .withValue(1000000000)\n    .withTokenAmount(10)\n    .build();\n```",
      "questions": "1. What is the purpose of the `BabelFeeBoxStateBuilder` class?\n    \n    The `BabelFeeBoxStateBuilder` class is used to conveniently instantiate a `BabelFeeBoxState` object with self-defined information.\n\n2. What are the required parameters for building a `BabelFeeBoxState` object?\n    \n    The required parameters for building a `BabelFeeBoxState` object are `pricePerToken`, `tokenId`, `boxCreator`, `value`, and `tokenAmount`.\n\n3. What happens if the `value` or `pricePerToken` parameters are less than or equal to 0?\n    \n    If the `value` or `pricePerToken` parameters are less than or equal to 0, an `IllegalArgumentException` will be thrown."
    },
    {
      "fileName": "BabelFeeOperations.java",
      "filePath": "lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeOperations.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/lib-api/src/main/java/org/ergoplatform/appkit/babelfee/BabelFeeOperations.java",
      "summary": "The `BabelFeeOperations` class provides methods for creating, canceling, and finding Babel fee boxes on the Ergo blockchain. Babel fee boxes are used to pay for transaction fees on the Ergo blockchain. \n\nThe `createNewBabelContractTx` method creates a new Babel fee box for a given token ID and price per token. It takes a `BoxOperations` object, which defines the box creator and amount to spend, a `tokenId`, and a `pricePerToken`. It returns a prepared transaction to create the new Babel fee box.\n\nThe `cancelBabelFeeContract` method cancels a Babel fee contract. It takes a `BoxOperations` object and an input Babel box. It returns an unsigned transaction to cancel the Babel fee contract.\n\nThe `findBabelFeeBox` method tries to fetch a Babel fee box for the given token ID from the blockchain data source using the given loader. If `maxPagesToLoadForPriceSearch` is 0, the Babel fee box with the best price satisfying `feeAmount` is returned. If `maxPagesToLoadForPriceSearch` is greater than 0, the box with the best price within these pages is returned. It takes the current blockchain context, a `BoxOperations.IUnspentBoxesLoader` object, a `tokenId`, a `feeAmount`, and a `maxPagesToLoadForPriceSearch`. It returns a Babel fee box satisfying the needs or null if none is available.\n\nThe `addBabelFeeBoxes` method adds Babel fee boxes (input and output) to the given transaction builder. It takes an unsigned transaction builder, an input Babel box to make the swap with, and nanoErgs to be covered by the Babel box, usually the fee amount needed, maybe a change amount as well.\n\nOverall, the `BabelFeeOperations` class provides a set of methods for creating, canceling, and finding Babel fee boxes on the Ergo blockchain. These methods can be used in the larger project to manage transaction fees on the Ergo blockchain.",
      "questions": "1. What is the purpose of the `BabelFeeOperations` class?\n- The `BabelFeeOperations` class contains static methods for creating and manipulating Babel fee boxes, which are used for swapping tokens on the Ergo blockchain.\n\n2. What is the `createNewBabelContractTx` method used for?\n- The `createNewBabelContractTx` method creates a new Babel fee box for a given token ID and price per token, using a prepared `BoxOperations` object to define the box creator and amount to spend.\n\n3. What is the `findBabelFeeBox` method used for?\n- The `findBabelFeeBox` method tries to fetch a Babel fee box for a given token ID and fee amount from the blockchain data source using a provided `BoxOperations.IUnspentBoxesLoader`. It returns the Babel fee box with the best price per token that satisfies the fee amount, or null if none are available."
    }
  ],
  "folders": [],
  "summary": "The `babelfee` folder contains classes that enable the creation and management of Babel Fee Boxes on the Ergo blockchain. Babel Fee Boxes are used to pay for transaction fees using tokens instead of the platform's primary token (ERG).\n\nThe `BabelFeeBoxContract` class represents a smart contract used to create a Babel Fee Box. It has two constructors that take either an `ErgoId` or an `ErgoTree` object as input. The `getErgoTree` and `getTokenId` methods return the contract's logic and the token ID used to pay for transaction fees, respectively.\n\n```java\nErgoId tokenId = new ErgoId(\"1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\");\nBabelFeeBoxContract contract = new BabelFeeBoxContract(tokenId);\nValues.ErgoTree ergoTree = contract.getErgoTree();\nlong value = 1000000000L;\nErgoBox box = new ErgoBox(value, ergoTree);\n```\n\nThe `BabelFeeBoxState` class represents the state of a Babel Fee Box and provides methods to interact with it, such as calculating the amount of tokens to sell to receive a certain amount of nanoErgs, building a new Babel Fee Box state after a token swap, and building an `OutBox` representing the Babel Fee Box.\n\nThe `BabelFeeBoxStateBuilder` class allows for the creation of a `BabelFeeBoxState` object with custom properties. It provides methods like `withPricePerToken`, `withTokenId`, `withBoxCreator`, `withValue`, and `withTokenAmount` to set specific properties of the `BabelFeeBoxState` object.\n\n```java\nBabelFeeBoxStateBuilder builder = new BabelFeeBoxStateBuilder();\nBabelFeeBoxState boxState = builder\n    .withPricePerToken(1000000)\n    .withTokenId(tokenId)\n    .withBoxCreator(boxCreator)\n    .withValue(1000000000)\n    .withTokenAmount(10)\n    .build();\n```\n\nThe `BabelFeeOperations` class provides methods for creating, canceling, and finding Babel fee boxes on the Ergo blockchain. The `createNewBabelContractTx` method creates a new Babel fee box for a given token ID and price per token. The `cancelBabelFeeContract` method cancels a Babel fee contract. The `findBabelFeeBox` method fetches a Babel fee box for the given token ID from the blockchain data source. The `addBabelFeeBoxes` method adds Babel fee boxes (input and output) to the given transaction builder.\n\nThese classes can be used in the larger project to manage transaction fees on the Ergo blockchain using Babel Fee Boxes. They provide a convenient way to create, cancel, and find Babel fee boxes, as well as interact with their states and properties.",
  "questions": ""
}