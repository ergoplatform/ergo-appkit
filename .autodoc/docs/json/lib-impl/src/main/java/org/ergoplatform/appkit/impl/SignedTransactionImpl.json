{
  "fileName": "SignedTransactionImpl.java",
  "filePath": "lib-impl/src/main/java/org/ergoplatform/appkit/impl/SignedTransactionImpl.java",
  "url": "https://github.com/ergoplatform/ergo-appkit/lib-impl/src/main/java/org/ergoplatform/appkit/impl/SignedTransactionImpl.java",
  "summary": "The `SignedTransactionImpl` class is a part of the `ergo-appkit` project and provides an implementation of the `SignedTransaction` interface. This class is responsible for creating a signed transaction and provides methods to interact with the transaction. \n\nThe `SignedTransactionImpl` class has three instance variables: `_ctx`, `_tx`, and `_txCost`. The `_ctx` variable is of type `BlockchainContextBase` and represents the blockchain context. The `_tx` variable is of type `ErgoLikeTransaction` and represents the signed transaction. The `_txCost` variable is of type `int` and represents the cost of the transaction.\n\nThe `SignedTransactionImpl` class provides several methods to interact with the transaction. The `getTx()` method returns the underlying `ErgoLikeTransaction`. The `getId()` method returns the ID of the transaction. The `toJson()` method returns the transaction in JSON format. The `getSignedInputs()` method returns a list of signed inputs. The `getOutputsToSpend()` method returns a list of output boxes that can be spent. The `getInputBoxesIds()` method returns a list of input box IDs. The `getOutputs()` method returns a list of output boxes. The `getCost()` method returns the cost of the transaction. The `toBytes()` method returns the transaction in byte format.\n\nThe `toJson()` method is particularly interesting as it takes two boolean parameters: `prettyPrint` and `formatJson`. If `prettyPrint` is true, the output JSON is formatted with indentation and line breaks. If `formatJson` is true, the output JSON is formatted with a consistent style. \n\nHere is an example of how to use the `SignedTransactionImpl` class:\n\n```java\nBlockchainContext ctx = ...; // create a blockchain context\nErgoLikeTransaction tx = ...; // create a signed transaction\nint txCost = ...; // set the cost of the transaction\nSignedTransaction signedTx = new SignedTransactionImpl(ctx, tx, txCost);\n\n// get the ID of the transaction\nString txId = signedTx.getId();\n\n// get the transaction in JSON format\nString txJson = signedTx.toJson(true, true);\n\n// get a list of signed inputs\nList<SignedInput> signedInputs = signedTx.getSignedInputs();\n\n// get a list of output boxes that can be spent\nList<InputBox> outputsToSpend = signedTx.getOutputsToSpend();\n\n// get a list of input box IDs\nList<String> inputBoxIds = signedTx.getInputBoxesIds();\n\n// get a list of output boxes\nList<OutBox> outputs = signedTx.getOutputs();\n\n// get the cost of the transaction\nint txCost = signedTx.getCost();\n\n// get the transaction in byte format\nbyte[] txBytes = signedTx.toBytes();\n```",
  "questions": "1. What is the purpose of the `SignedTransactionImpl` class?\n- The `SignedTransactionImpl` class is an implementation of the `SignedTransaction` interface and provides methods for interacting with a signed Ergo transaction.\n\n2. What is the `toJson` method used for?\n- The `toJson` method is used to serialize the transaction to JSON format. It takes two boolean parameters, `prettyPrint` and `formatJson`, which control the formatting of the output.\n\n3. What is the purpose of the `getOutputsToSpend` method?\n- The `getOutputsToSpend` method returns a list of `InputBox` objects that represent the outputs of previous transactions that are being spent by the current transaction."
}