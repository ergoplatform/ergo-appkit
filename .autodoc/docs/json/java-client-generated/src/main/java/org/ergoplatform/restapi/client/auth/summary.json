{
  "folderName": "auth",
  "folderPath": ".autodoc/docs/json/java-client-generated/src/main/java/org/ergoplatform/restapi/client/auth",
  "url": "https://github.com/ergoplatform/ergo-appkit/.autodoc/docs/json/java-client-generated/src/main/java/org/ergoplatform/restapi/client/auth",
  "files": [
    {
      "fileName": "ApiKeyAuth.java",
      "filePath": "java-client-generated/src/main/java/org/ergoplatform/restapi/client/auth/ApiKeyAuth.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/java-client-generated/src/main/java/org/ergoplatform/restapi/client/auth/ApiKeyAuth.java",
      "summary": "The `ApiKeyAuth` class is responsible for adding an API key to outgoing HTTP requests. It implements the `Interceptor` interface from the OkHttp library, which allows it to intercept and modify requests before they are sent. \n\nThe class takes two arguments in its constructor: `location` and `paramName`. `location` specifies where the API key should be added - either as a query parameter or a header. `paramName` specifies the name of the query parameter or header that should be used to send the API key.\n\nThe API key itself is stored as a private field in the class, and can be set using the `setApiKey` method. The `getApiKey` method can be used to retrieve the current API key.\n\nThe `intercept` method is where the actual modification of the request takes place. If the `location` is set to \"query\", the API key is added as a query parameter to the request URL. If the URL already has a query string, the API key is appended as an additional parameter. If the `location` is set to \"header\", the API key is added as a header to the request.\n\nThis class can be used in the larger project to authenticate requests to an API that requires an API key. By adding an instance of this class to an OkHttp client, all outgoing requests will automatically include the API key. For example:\n\n```\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(new ApiKeyAuth(\"header\", \"X-Api-Key\"))\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://api.example.com/some-endpoint\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```",
      "questions": "1. What is the purpose of this code?\n    \n    This code defines a class called `ApiKeyAuth` that implements the `Interceptor` interface from the OkHttp library. It is used to add an API key to outgoing HTTP requests either as a query parameter or a header.\n\n2. What parameters does the `ApiKeyAuth` constructor take?\n    \n    The `ApiKeyAuth` constructor takes two parameters: `location`, which is a string indicating whether the API key should be added as a query parameter or a header, and `paramName`, which is a string indicating the name of the query parameter or header that the API key should be added to.\n\n3. What does the `intercept` method do?\n    \n    The `intercept` method is called by OkHttp when an HTTP request is being sent. It checks the `location` parameter to determine whether the API key should be added as a query parameter or a header, and then modifies the request accordingly. If the `location` is \"query\", it adds the API key as a query parameter to the request URL. If the `location` is \"header\", it adds the API key as a header to the request."
    },
    {
      "fileName": "HttpBasicAuth.java",
      "filePath": "java-client-generated/src/main/java/org/ergoplatform/restapi/client/auth/HttpBasicAuth.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/java-client-generated/src/main/java/org/ergoplatform/restapi/client/auth/HttpBasicAuth.java",
      "summary": "The `HttpBasicAuth` class in the `org.ergoplatform.restapi.client.auth` package is responsible for adding HTTP Basic Authentication headers to outgoing requests made by the `OkHttpClient` instance. This class implements the `Interceptor` interface from the `okhttp3` library, which allows it to intercept and modify outgoing requests before they are sent to the server.\n\nThe class has three instance variables: `username`, `password`, and `credentials`. The `username` and `password` variables store the username and password for the Basic Authentication header, respectively. The `credentials` variable is a convenience method for setting both the `username` and `password` at the same time.\n\nThe `intercept` method is the heart of this class. It takes an `Interceptor.Chain` object as a parameter, which represents the chain of interceptors that will be applied to the request. It then retrieves the original request from the chain and checks if it already has an Authorization header. If it does not, it creates a new request with the Authorization header set to the Basic Authentication credentials using the `Credentials.basic` method from the `okhttp3` library. Finally, it returns the result of calling `chain.proceed(request)`, which sends the modified request down the interceptor chain.\n\nThis class can be used in conjunction with an `OkHttpClient` instance to add Basic Authentication headers to outgoing requests. Here's an example of how to use it:\n\n```\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(new HttpBasicAuth())\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://example.com/api\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```\n\nIn this example, we create a new `OkHttpClient` instance and add an instance of `HttpBasicAuth` as an interceptor. We then create a new `Request` object with the desired URL and send it using the `OkHttpClient`. The `HttpBasicAuth` interceptor will automatically add the Basic Authentication header to the request before it is sent.",
      "questions": "1. What is the purpose of this code?\n    \n    This code defines a class called `HttpBasicAuth` that implements the `Interceptor` interface from the OkHttp library. It adds HTTP Basic authentication credentials to outgoing requests if they don't already have them.\n\n2. How does this code handle requests that already have authorization headers?\n    \n    If the request already has an authorization header (e.g. for Basic auth), the code does nothing and simply proceeds with the request as-is.\n\n3. What library or libraries does this code depend on?\n    \n    This code depends on the OkHttp library for handling HTTP requests and responses."
    }
  ],
  "folders": [],
  "summary": "The `org.ergoplatform.restapi.client.auth` package contains two classes, `ApiKeyAuth` and `HttpBasicAuth`, which are responsible for adding authentication information to outgoing HTTP requests made by the `OkHttpClient` instance. Both classes implement the `Interceptor` interface from the `okhttp3` library, allowing them to intercept and modify requests before they are sent to the server.\n\nThe `ApiKeyAuth` class is used for APIs that require an API key for authentication. It takes two arguments in its constructor: `location` and `paramName`. `location` specifies where the API key should be added - either as a query parameter or a header. `paramName` specifies the name of the query parameter or header that should be used to send the API key. The API key itself is stored as a private field in the class and can be set using the `setApiKey` method. The `intercept` method modifies the request by adding the API key to the specified location.\n\nExample usage of `ApiKeyAuth`:\n\n```java\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(new ApiKeyAuth(\"header\", \"X-Api-Key\"))\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://api.example.com/some-endpoint\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```\n\nThe `HttpBasicAuth` class is used for APIs that require HTTP Basic Authentication. It has three instance variables: `username`, `password`, and `credentials`. The `intercept` method retrieves the original request from the interceptor chain and checks if it already has an Authorization header. If it does not, it creates a new request with the Authorization header set to the Basic Authentication credentials using the `Credentials.basic` method from the `okhttp3` library.\n\nExample usage of `HttpBasicAuth`:\n\n```java\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(new HttpBasicAuth())\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://example.com/api\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```\n\nIn both examples, we create a new `OkHttpClient` instance and add an instance of the respective authentication interceptor. We then create a new `Request` object with the desired URL and send it using the `OkHttpClient`. The authentication interceptor will automatically add the required authentication information to the request before it is sent.",
  "questions": ""
}