{
  "fileName": "Balance.java",
  "filePath": "java-client-generated/src/main/java/org/ergoplatform/explorer/client/model/Balance.java",
  "url": "https://github.com/ergoplatform/ergo-appkit/java-client-generated/src/main/java/org/ergoplatform/explorer/client/model/Balance.java",
  "summary": "This code defines a Java class called `Balance` that represents the balance of an Ergo wallet. The `Balance` class has two properties: `nanoErgs` and `tokens`. The `nanoErgs` property is a `Long` that represents the balance of the wallet in Ergs, the native currency of the Ergo blockchain. The `tokens` property is a list of `TokenAmount` objects that represent the balance of the wallet in non-native tokens.\n\nThe `Balance` class has getter and setter methods for both properties. The `getNanoErgs` method returns the value of the `nanoErgs` property, while the `getTokens` method returns the list of `TokenAmount` objects. The `setNanoErgs` and `setTokens` methods set the values of the `nanoErgs` and `tokens` properties, respectively. The `addTokensItem` method adds a `TokenAmount` object to the list of tokens.\n\nThe `Balance` class also has methods for equality checking, hashing, and string representation. These methods are used to compare `Balance` objects, generate hash codes for `Balance` objects, and convert `Balance` objects to strings, respectively.\n\nThis class is likely used in the larger project to represent the balance of an Ergo wallet. It can be instantiated with a balance in Ergs and a list of `TokenAmount` objects representing the balance in non-native tokens. The `Balance` object can then be passed around the project to represent the wallet balance. For example, it could be used to display the balance of a wallet in a user interface or to calculate the total value of a user's assets. \n\nExample usage:\n```\nBalance balance = new Balance();\nbalance.setNanoErgs(1000000000L); // set balance to 1 Erg\nList<TokenAmount> tokens = new ArrayList<>();\ntokens.add(new TokenAmount(\"Token1\", 100)); // add 100 units of Token1\ntokens.add(new TokenAmount(\"Token2\", 50)); // add 50 units of Token2\nbalance.setTokens(tokens); // set the token balances\n```",
  "questions": "1. What is the purpose of this code?\n- This code defines a Java class called `Balance` that represents the balance of an Ergo wallet, including the amount of nanoErgs and any tokens held.\n\n2. What is the significance of the `@Schema` annotation?\n- The `@Schema` annotation is used to provide metadata about the `nanoErgs` and `tokens` fields, including their descriptions and whether they are required.\n\n3. What is the purpose of the `toIndentedString` method?\n- The `toIndentedString` method is a helper method used to convert an object to a string with each line indented by 4 spaces, which is used in the `toString` method to format the output of the `Balance` class."
}