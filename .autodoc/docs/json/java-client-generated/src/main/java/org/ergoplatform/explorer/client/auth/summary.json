{
  "folderName": "auth",
  "folderPath": ".autodoc/docs/json/java-client-generated/src/main/java/org/ergoplatform/explorer/client/auth",
  "url": "https://github.com/ergoplatform/ergo-appkit/.autodoc/docs/json/java-client-generated/src/main/java/org/ergoplatform/explorer/client/auth",
  "files": [
    {
      "fileName": "ApiKeyAuth.java",
      "filePath": "java-client-generated/src/main/java/org/ergoplatform/explorer/client/auth/ApiKeyAuth.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/java-client-generated/src/main/java/org/ergoplatform/explorer/client/auth/ApiKeyAuth.java",
      "summary": "The `ApiKeyAuth` class is responsible for adding an API key to HTTP requests made by the Ergo Explorer client. It implements the `Interceptor` interface from the OkHttp library, which allows it to intercept and modify HTTP requests and responses.\n\nThe class takes two parameters in its constructor: `location` and `paramName`. `location` specifies where the API key should be added - either as a query parameter or a header. `paramName` specifies the name of the query parameter or header that should contain the API key.\n\nThe API key itself is stored in the `apiKey` field, which can be set using the `setApiKey` method. The `getApiKey` method can be used to retrieve the current API key.\n\nThe `intercept` method is where the actual interception and modification of requests happens. It first retrieves the original request using the `chain.request()` method. If the `location` is set to \"query\", it adds the API key as a query parameter to the request URL. If the `location` is set to \"header\", it adds the API key as a header to the request.\n\nThe modified request is then returned using `chain.proceed(request)`, which sends the request to the server and returns the server's response.\n\nThis class can be used in the larger Ergo Explorer project to ensure that all requests made by the client include the necessary API key. For example, if the Ergo Explorer client needs to make a request to the Ergo blockchain API, it can use an instance of `ApiKeyAuth` to add the API key to the request. Here's an example of how this might be done:\n\n```\nApiKeyAuth apiKeyAuth = new ApiKeyAuth(\"header\", \"X-Api-Key\");\napiKeyAuth.setApiKey(\"my-api-key\");\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(apiKeyAuth)\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://api.ergoplatform.com\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```",
      "questions": "1. What is the purpose of this code?\n    \n    This code defines a class called `ApiKeyAuth` that implements the `Interceptor` interface from the OkHttp library. It is used to add an API key to HTTP requests either as a query parameter or a header.\n\n2. What parameters does the `ApiKeyAuth` constructor take?\n    \n    The `ApiKeyAuth` constructor takes two parameters: `location` and `paramName`. `location` specifies whether the API key should be added as a query parameter or a header, and `paramName` is the name of the query parameter or header that the API key should be added to.\n\n3. What does the `intercept` method do?\n    \n    The `intercept` method is called by OkHttp when an HTTP request is made. It checks the `location` parameter to determine whether the API key should be added as a query parameter or a header, and then modifies the request accordingly. If the `location` is \"query\", it adds the API key as a query parameter to the request URL. If the `location` is \"header\", it adds the API key as a header to the request."
    },
    {
      "fileName": "HttpBasicAuth.java",
      "filePath": "java-client-generated/src/main/java/org/ergoplatform/explorer/client/auth/HttpBasicAuth.java",
      "url": "https://github.com/ergoplatform/ergo-appkit/java-client-generated/src/main/java/org/ergoplatform/explorer/client/auth/HttpBasicAuth.java",
      "summary": "The `HttpBasicAuth` class in the `org.ergoplatform.explorer.client.auth` package is responsible for adding HTTP Basic Authentication headers to outgoing requests made by an `OkHttpClient` instance. This class implements the `Interceptor` interface from the OkHttp library, which allows it to intercept and modify requests and responses.\n\nThe class has three instance variables: `username`, `password`, and `credentials`. The `username` and `password` variables store the username and password for the Basic Authentication header, respectively. The `credentials` variable is a convenience method for setting both the `username` and `password` at once.\n\nThe `intercept` method is the main method of the class and is called by OkHttp whenever a request is made. It first retrieves the original request from the `Chain` object passed as a parameter. If the request already has an Authorization header, the method does nothing and simply returns the original request. If the request does not have an Authorization header, the method creates a new request with the Authorization header added using the `Credentials.basic` method from OkHttp. This method takes the `username` and `password` instance variables and returns a string in the format \"Basic [base64-encoded username:password]\". The new request is then returned using the `chain.proceed` method.\n\nThis class can be used in conjunction with an `OkHttpClient` instance to add Basic Authentication headers to all outgoing requests. For example:\n\n```\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(new HttpBasicAuth())\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://example.com/api\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```\n\nIn this example, the `HttpBasicAuth` instance is added as an interceptor to the `OkHttpClient` instance. This means that all requests made using this client will have the Basic Authentication header added automatically. The `Request` object is then created as usual and passed to the `OkHttpClient` instance to execute the request.",
      "questions": "1. What is the purpose of this code?\n   This code defines a class called `HttpBasicAuth` that implements the `Interceptor` interface from the OkHttp library. It adds HTTP Basic authentication credentials to outgoing requests if they don't already have them.\n\n2. How is the username and password set for this HTTP Basic authentication?\n   The username and password can be set separately using the `setUsername` and `setPassword` methods, or together using the `setCredentials` method.\n\n3. What happens if a request already has an authorization header?\n   If a request already has an authorization header (e.g. for Basic auth), the `intercept` method does nothing and simply proceeds with the request as-is."
    }
  ],
  "folders": [],
  "summary": "The `org.ergoplatform.explorer.client.auth` package contains two classes, `ApiKeyAuth` and `HttpBasicAuth`, which are responsible for adding authentication information to HTTP requests made by the Ergo Explorer client. Both classes implement the `Interceptor` interface from the OkHttp library, allowing them to intercept and modify HTTP requests and responses.\n\n`ApiKeyAuth` is used to add an API key to requests. It takes two parameters in its constructor: `location` and `paramName`. `location` specifies where the API key should be added - either as a query parameter or a header. `paramName` specifies the name of the query parameter or header that should contain the API key. The API key itself is stored in the `apiKey` field, which can be set using the `setApiKey` method. The `intercept` method adds the API key to the request based on the `location` value.\n\nExample usage:\n\n```java\nApiKeyAuth apiKeyAuth = new ApiKeyAuth(\"header\", \"X-Api-Key\");\napiKeyAuth.setApiKey(\"my-api-key\");\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(apiKeyAuth)\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://api.ergoplatform.com\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```\n\n`HttpBasicAuth` is used to add HTTP Basic Authentication headers to requests. It has three instance variables: `username`, `password`, and `credentials`. The `intercept` method retrieves the original request and checks if it already has an Authorization header. If not, it creates a new request with the Authorization header added using the `Credentials.basic` method from OkHttp, which takes the `username` and `password` instance variables and returns a string in the format \"Basic [base64-encoded username:password]\". The new request is then returned using the `chain.proceed` method.\n\nExample usage:\n\n```java\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(new HttpBasicAuth())\n        .build();\n\nRequest request = new Request.Builder()\n        .url(\"https://example.com/api\")\n        .build();\n\nResponse response = client.newCall(request).execute();\n```\n\nIn summary, the `org.ergoplatform.explorer.client.auth` package provides two classes for adding authentication information to HTTP requests made by the Ergo Explorer client. These classes can be used in conjunction with an `OkHttpClient` instance to ensure that all requests include the necessary authentication information.",
  "questions": ""
}