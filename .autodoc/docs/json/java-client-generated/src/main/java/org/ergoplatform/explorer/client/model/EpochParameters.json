{
  "fileName": "EpochParameters.java",
  "filePath": "java-client-generated/src/main/java/org/ergoplatform/explorer/client/model/EpochParameters.java",
  "url": "https://github.com/ergoplatform/ergo-appkit/java-client-generated/src/main/java/org/ergoplatform/explorer/client/model/EpochParameters.java",
  "summary": "The `EpochParameters` class is a model class that represents the epoch parameters of the Ergo blockchain. It contains various fields that represent different parameters of an epoch, such as the `storageFeeFactor`, `maxBlockSize`, `maxBlockCost`, `blockVersion`, `tokenAccessCost`, `inputCost`, `dataInputCost`, and `outputCost`. \n\nThis class is generated by the Swagger Codegen program and should not be edited manually. It is used to provide a structured representation of epoch parameters that can be used by other classes in the Ergo Explorer API. \n\nFor example, if we have an API endpoint that returns epoch parameters, we can use this class to deserialize the response into an `EpochParameters` object. \n\n```java\n// Assuming we have an API client that returns epoch parameters\nEpochParameters epochParams = apiClient.getEpochParameters();\n\n// We can then access the different parameters of the epoch\nint storageFeeFactor = epochParams.getStorageFeeFactor();\nint maxBlockSize = epochParams.getMaxBlockSize();\nint maxBlockCost = epochParams.getMaxBlockCost();\n// ... and so on\n```\n\nOverall, the `EpochParameters` class is an important part of the Ergo Explorer API as it provides a standardized way of representing epoch parameters that can be used by other classes and endpoints.",
  "questions": "1. What is the purpose of this code?\n- This code defines a Java class called `EpochParameters` which contains various parameters related to a blockchain epoch.\n\n2. What are the required parameters for an `EpochParameters` object?\n- The required parameters for an `EpochParameters` object are `id`, `height`, `storageFeeFactor`, `minValuePerByte`, `maxBlockSize`, `maxBlockCost`, `blockVersion`, `tokenAccessCost`, `inputCost`, `dataInputCost`, and `outputCost`.\n\n3. Is there any custom serialization or deserialization logic implemented for this class?\n- Yes, there is custom serialization and deserialization logic implemented for this class using the `com.google.gson` library."
}