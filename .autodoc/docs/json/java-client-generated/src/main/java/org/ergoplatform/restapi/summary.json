{
  "folderName": "restapi",
  "folderPath": ".autodoc/docs/json/java-client-generated/src/main/java/org/ergoplatform/restapi",
  "url": "https://github.com/ergoplatform/ergo-appkit/.autodoc/docs/json/java-client-generated/src/main/java/org/ergoplatform/restapi",
  "files": [],
  "folders": [],
  "summary": "The `.autodoc/docs/json/java-client-generated/src/main/java/org/ergoplatform/restapi` folder contains the Java classes that are generated from the Ergo Platform REST API specification. These classes are used to interact with the Ergo blockchain through the REST API, allowing developers to easily integrate Ergo functionality into their Java applications.\n\n### Files\n\n1. `ApiClient.java`: This file contains the `ApiClient` class, which is responsible for managing the communication with the Ergo REST API. It handles HTTP requests, authentication, and serialization/deserialization of JSON data.\n\n2. `ApiException.java`: This file contains the `ApiException` class, which is a custom exception class used to handle errors that occur during API calls. It provides detailed information about the error, such as the HTTP status code and the error message.\n\n3. `Configuration.java`: This file contains the `Configuration` class, which is used to configure the `ApiClient`. It allows developers to set various options, such as the API base path, authentication credentials, and timeouts.\n\n4. `GsonAdaptersModel.java`: This file contains the `GsonAdaptersModel` class, which is used to register custom Gson type adapters for the serialization and deserialization of JSON data. This ensures that the Java classes can be correctly mapped to the JSON data returned by the Ergo REST API.\n\n5. `Pair.java`: This file contains the `Pair` class, which is a simple utility class used to store a pair of values. It is used internally by the `ApiClient` class to manage query parameters and form data.\n\n6. `ProgressRequestBody.java` and `ProgressResponseBody.java`: These files contain the `ProgressRequestBody` and `ProgressResponseBody` classes, which are used to monitor the progress of file uploads and downloads during API calls. They extend the OkHttp `RequestBody` and `ResponseBody` classes and provide progress callbacks.\n\n### Usage\n\nTo use the Java client generated from the Ergo REST API, you would first create an instance of the `ApiClient` class and configure it using the `Configuration` class. For example:\n\n```java\nConfiguration config = new Configuration();\nconfig.setApiKey(\"your_api_key\");\nconfig.setBasePath(\"https://api.ergoplatform.com\");\n\nApiClient apiClient = new ApiClient(config);\n```\n\nNext, you would use the `ApiClient` instance to make API calls. For example, to get the balance of an address:\n\n```java\nString address = \"9f4QF8AD1nQ3nJahQVkM6c8qiuyhM1i8Kgh8Dt6hP8Xf8gsgg5u\";\nApiResponse<Balance> response = apiClient.invokeAPI(\"/addresses/\" + address + \"/balance\", \"GET\", null, null, null, null, null, \"application/json\", null, new TypeToken<Balance>(){}.getType());\n\nBalance balance = response.getData();\nSystem.out.println(\"Balance: \" + balance.getConfirmed().getNanoErgs());\n```\n\nThis code snippet demonstrates how to configure the `ApiClient`, make an API call to get the balance of an address, and extract the balance information from the response.",
  "questions": ""
}