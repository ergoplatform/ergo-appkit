/*
 * Ergo Explorer API v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ergoplatform.explorer.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.ergoplatform.explorer.client.model.DataInputInfo1;
import org.ergoplatform.explorer.client.model.InputInfo1;
import org.ergoplatform.explorer.client.model.OutputInfo1;
/**
 * TransactionInfo1
 */


public class TransactionInfo1 {
  @SerializedName("id")
  private String id = null;

  @SerializedName("headerId")
  private String headerId = null;

  @SerializedName("inclusionHeight")
  private Long inclusionHeight = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("index")
  private Integer index = null;

  @SerializedName("confirmationsCount")
  private Integer confirmationsCount = null;

  @SerializedName("inputs")
  private java.util.List<InputInfo1> inputs = null;

  @SerializedName("dataInputs")
  private java.util.List<DataInputInfo1> dataInputs = null;

  @SerializedName("outputs")
  private java.util.List<OutputInfo1> outputs = null;

  public TransactionInfo1 id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Transaction ID
   * @return id
  **/
  @Schema(required = true, description = "Transaction ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TransactionInfo1 headerId(String headerId) {
    this.headerId = headerId;
    return this;
  }

   /**
   * ID of the corresponding header
   * @return headerId
  **/
  @Schema(required = true, description = "ID of the corresponding header")
  public String getHeaderId() {
    return headerId;
  }

  public void setHeaderId(String headerId) {
    this.headerId = headerId;
  }

  public TransactionInfo1 inclusionHeight(Long inclusionHeight) {
    this.inclusionHeight = inclusionHeight;
    return this;
  }

   /**
   * Height of the block the transaction was included in
   * @return inclusionHeight
  **/
  @Schema(required = true, description = "Height of the block the transaction was included in")
  public Long getInclusionHeight() {
    return inclusionHeight;
  }

  public void setInclusionHeight(Long inclusionHeight) {
    this.inclusionHeight = inclusionHeight;
  }

  public TransactionInfo1 timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp the transaction got into the network
   * @return timestamp
  **/
  @Schema(required = true, description = "Timestamp the transaction got into the network")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public TransactionInfo1 index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Index of a transaction inside a block
   * @return index
  **/
  @Schema(required = true, description = "Index of a transaction inside a block")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public TransactionInfo1 confirmationsCount(Integer confirmationsCount) {
    this.confirmationsCount = confirmationsCount;
    return this;
  }

   /**
   * Number of transaction confirmations
   * @return confirmationsCount
  **/
  @Schema(required = true, description = "Number of transaction confirmations")
  public Integer getConfirmationsCount() {
    return confirmationsCount;
  }

  public void setConfirmationsCount(Integer confirmationsCount) {
    this.confirmationsCount = confirmationsCount;
  }

  public TransactionInfo1 inputs(java.util.List<InputInfo1> inputs) {
    this.inputs = inputs;
    return this;
  }

  public TransactionInfo1 addInputsItem(InputInfo1 inputsItem) {
    if (this.inputs == null) {
      this.inputs = new java.util.ArrayList<InputInfo1>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @Schema(description = "")
  public java.util.List<InputInfo1> getInputs() {
    return inputs;
  }

  public void setInputs(java.util.List<InputInfo1> inputs) {
    this.inputs = inputs;
  }

  public TransactionInfo1 dataInputs(java.util.List<DataInputInfo1> dataInputs) {
    this.dataInputs = dataInputs;
    return this;
  }

  public TransactionInfo1 addDataInputsItem(DataInputInfo1 dataInputsItem) {
    if (this.dataInputs == null) {
      this.dataInputs = new java.util.ArrayList<DataInputInfo1>();
    }
    this.dataInputs.add(dataInputsItem);
    return this;
  }

   /**
   * Get dataInputs
   * @return dataInputs
  **/
  @Schema(description = "")
  public java.util.List<DataInputInfo1> getDataInputs() {
    return dataInputs;
  }

  public void setDataInputs(java.util.List<DataInputInfo1> dataInputs) {
    this.dataInputs = dataInputs;
  }

  public TransactionInfo1 outputs(java.util.List<OutputInfo1> outputs) {
    this.outputs = outputs;
    return this;
  }

  public TransactionInfo1 addOutputsItem(OutputInfo1 outputsItem) {
    if (this.outputs == null) {
      this.outputs = new java.util.ArrayList<OutputInfo1>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @Schema(description = "")
  public java.util.List<OutputInfo1> getOutputs() {
    return outputs;
  }

  public void setOutputs(java.util.List<OutputInfo1> outputs) {
    this.outputs = outputs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionInfo1 transactionInfo1 = (TransactionInfo1) o;
    return Objects.equals(this.id, transactionInfo1.id) &&
        Objects.equals(this.headerId, transactionInfo1.headerId) &&
        Objects.equals(this.inclusionHeight, transactionInfo1.inclusionHeight) &&
        Objects.equals(this.timestamp, transactionInfo1.timestamp) &&
        Objects.equals(this.index, transactionInfo1.index) &&
        Objects.equals(this.confirmationsCount, transactionInfo1.confirmationsCount) &&
        Objects.equals(this.inputs, transactionInfo1.inputs) &&
        Objects.equals(this.dataInputs, transactionInfo1.dataInputs) &&
        Objects.equals(this.outputs, transactionInfo1.outputs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, headerId, inclusionHeight, timestamp, index, confirmationsCount, inputs, dataInputs, outputs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionInfo1 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    headerId: ").append(toIndentedString(headerId)).append("\n");
    sb.append("    inclusionHeight: ").append(toIndentedString(inclusionHeight)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    confirmationsCount: ").append(toIndentedString(confirmationsCount)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    dataInputs: ").append(toIndentedString(dataInputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
